version: 2.1

orbs:
  slack: circleci/slack@4.4.4

fail_template: &fail_template
  custom: |
    {
      "blocks": [
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": ":red_circle: Failed job: $CIRCLE_JOB, Build number: $CIRCLE_BUILD_NUM ($CIRCLE_BUILD_URL)"
          }
        },
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "Commit hash: $CIRCLE_SHA1 on ($CIRCLE_BRANCH)"
          }
        }
      ]
    }

success_template: &success_template
  custom: |
    {
      "blocks": [
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": ":white_check_mark: Fixed job: $CIRCLE_JOB, Build number: $CIRCLE_BUILD_NUM ($CIRCLE_BUILD_URL)"
          }
        },
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "Commit hash: $CIRCLE_SHA1 on ($CIRCLE_BRANCH)"
          }
        }
      ]
    }

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Rollback of backend in event of job failing
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name "backend-$CIRCLE_WORKFLOW_ID"
      - run:
          name: Rollback of frontend in event of job failing
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name "frontend-$CIRCLE_WORKFLOW_ID"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/successfulMigration)
            echo $SUCCESS
            if(( $SUCCESS=="1" )); 
            then
              cd ~/project/backend
              cd backend
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "package-lock.json" }}
      - run: 
          name: Front-end build
          command: |
            cd frontend
            npm install
            npm install oauth-sign
            npm run build
            npm run lint
            ls -l
      - save_cache:
          key: frontend-build-{{ checksum "package-lock.json" }}
          paths: 
            - frontend/node_modules
            - frontend/dist
            - frontend/package-lock.json
      - slack/notify:
          event: fail
          <<: *fail_template

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build-{{ checksum "package-lock.json" }}
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            npm run lint
      - save_cache:
          key: backend-build-{{ checksum "package-lock.json" }}
          paths: 
            - backend/node_modules
            - backend/dist
      - slack/notify:
          event: fail
          <<: *fail_template
      
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: frontend-build-{{ checksum "package-lock.json" }}
      # Your job code here
      - run:
          name: Unit Testing frontend
          command: |
            cd frontend
            npm run test
      - slack/notify:
          event: fail
          <<: *fail_template
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: backend-build-{{ checksum "package-lock.json" }}
      # Your job code here
      - run:
          name: Unit Testing backend
          command: |
            cd backend
            npm run test
      - slack/notify:
          event: fail
          <<: *fail_template
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "package-lock.json" }}
      - run:
          name: Scanning frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          <<: *fail_template

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: backend-build-{{ checksum "package-lock.json" }}
      # Your job code here
      - run:
          name: Scanning backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          <<: *fail_template

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip jq
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Project=udapeople Stack=backend \
              --stack-name "backend-$CIRCLE_WORKFLOW_ID" \
              --parameter-overrides ID="$CIRCLE_WORKFLOW_ID"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags Project=udapeople Stack=frontend \
              --stack-name "frontend-$CIRCLE_WORKFLOW_ID" \
              --parameter-overrides ID="$CIRCLE_WORKFLOW_ID"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [web] > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --filters "Name=tag:Stack,Values=backend" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - run:
          name: copy inventory to /root
          command: |
            cp .circleci/ansible/inventory.txt /root/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - slack/notify:
          event: pass
          <<: *success_template
      - slack/notify:
          event: fail
          <<: *fail_template
      # rollback on failure
      - destroy-environment
      
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["5a:bf:c3:70:1f:c7:cf:b4:c8:21:99:36:b8:ab:cc:b8"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies (1/2)
          command: |
            apk add --no-cache \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install awscli \
      - run:
          name: Install dependencies (2/2)
          command: |
            apk add --update ansible curl jq \
              && rm -rf /var/cache/apk/*
      - run:
          name: Configure server
          command: |
            cat ~/inventory.txt
            ansible-playbook -i ~/inventory.txt .circleci/ansible/configure-server.yml
      - slack/notify:
          event: fail
          <<: *fail_template
      # rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          key: backend-build-{{ checksum "package-lock.json" }}
      - run:
          name: Run migrations
          command: |
            cd backend
            # npm install
            # npm audit fix  --audit-level=critical --force
            # npm run build
            npm run migrations > migrationOutput.txt
            cat migrationOutput.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if [grep -x "has been executed successfully" migrationOutput.txt]; \
              then curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" \
              --request PUT --data "1" https://api.memstash.io/values/successfulMigration; else \
              curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" \
              --request PUT --data "0" https://api.memstash.io/values/successfulMigration; fi
      - slack/notify:
          event: pass
          <<: *success_template
      - slack/notify:
          event: fail
          <<: *fail_template
      # Here's where you will add some code to rollback on failure
      - revert-migrations

workflows:
  default:
    jobs:
      - build-frontend:
          context: SLACK
      - build-backend:
          context: SLACK
      # - test-frontend:
      #     context: SLACK
      #     requires: [build-frontend]
      # - test-backend:
      #     context: SLACK
      #     requires: [build-backend]
      # - scan-frontend:
      #     context: SLACK
      #     requires: [build-frontend]
      # - scan-backend:
      #     context: SLACK
      #     requires: [build-backend]
      # - deploy-infrastructure:
      #     context: SLACK
      #     # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [main]
      # - configure-infrastructure:
      #     context: SLACK
      #     requires: [deploy-infrastructure]
      - run-migrations:
          context: SLACK
          requires: [build-backend]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]