version: 2.1

orbs:
  slack: circleci/slack@4.4.4

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "package-lock.json" }}
      - run: 
          name: Front-end build
          command: |
            cd frontend
            npm install
            npm install oauth-sign
            npm run build
            npm run lint
            ls -l
      - save_cache:
          key: frontend-build-{{ checksum "package-lock.json" }}
          paths: 
            - frontend/node_modules
            - frontend/dist

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build-{{ checksum "package-lock.json" }}
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            npm run lint
      - save_cache:
          key: backend-build-{{ checksum "package-lock.json" }}
          paths: 
            - backend/node_modules
            - backend/dist
      - slack/notify:
          event: always
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Job: $CIRCLE_JOB, Build: $CIRCLE_BUILD_NUM of $CIRCLE_BRANCH"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Commit #$CIRCLE_SHA1 on ($CIRCLE_BRANCH)"
                  }
                }
              ]
            }
      
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: frontend-build-{{ checksum "package-lock.json" }}
      # Your job code here
      - run:
          name: Unit Testing frontend
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: backend-build-{{ checksum "package-lock.json" }}
      # Your job code here
      - run:
          name: Unit Testing backend
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "package-lock.json" }}
      - run:
          name: Scanning frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force         

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: backend-build-{{ checksum "package-lock.json" }}
      # Your job code here
      - run:
          name: Scanning backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend:
          context: SLACK
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]